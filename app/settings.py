"""
Django settings for myhackupc2 project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

from django.contrib.messages import constants as message_constants
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from .hackathon_variables import *

BASE_DIR = Path(__file__).resolve().parent.parent

# Carga las variables del archivo .env antes de leer configuraciones dependientes
load_dotenv(os.path.join(BASE_DIR, '.env'))

FRIENDS_MAX_CAPACITY = 4
JUDGE_SIGNUP_CODES = [code.strip() for code in os.getenv('JUDGE_SIGNUP_CODES', '').split(',') if code.strip()]
JUDGE_TYPE_CHOICES = [
    ('technical', _('Technical / Engineering')),
    ('product', _('Product / UX / Research')),
    ('business', _('Business / Strategy / Operations')),
    ('sponsor', _('Sponsor / Partner / Donor')),
    ('other', _('Other / Generalist')),
]


# Build paths inside the project like this: BASE_DIR / 'subdir'.

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
PROD_MODE = os.getenv('PROD_MODE', 'False').lower() == 'true'
DEBUG = not PROD_MODE

ALLOWED_HOSTS_STR = os.getenv('ALLOWED_HOSTS', '').split(',')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STR if host.strip()]
HOST = os.environ.get('HOST')

if DEBUG:
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])
elif HOST is not None:
    ALLOWED_HOSTS.append(HOST)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
    'admin_honeypot',
    'captcha',
    'django_tables2',
    'django_filters',
    'django_jwt',
    'django_jwt.server',
    'django_bootstrap5',
    'django_tex',
    'compressor',
    'colorfield',
    'corsheaders',
    'django_crontab',
    'axes',
    'django_password_validators',
    'django_password_validators.password_history',
    'rest_framework',
    'user',
    'application',
    'review',
    'stats',
    'tables',
    'friends',
    'event',
    'event.messages',
    'event.meals',
    'judging',
    'anymail',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'app.middlewares.TimezoneMiddleware',
    'csp.middleware.CSPMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [BASE_DIR / 'templates', BASE_DIR / 'app' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'app.template.app_variables',  # temporarily disabled while debugging RecursionError in templates
                'csp.context_processors.nonce',
                'app.template.app_variables',
            ],
            'libraries': {
                'util': 'app.templatetags.util',
                'crispy_forms_tags': 'app.templatetags.util',
            },
        },
    },
    {
        'NAME': 'tex',
        'BACKEND': 'django_tex.engine.TeXEngine',
        'DIRS': [BASE_DIR / 'app' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                # 'app.template.app_variables',  # temporarily disabled while debugging RecursionError in templates
                'app.template.app_variables',
            ]
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DB_ENGINE = os.environ.get('DB_ENGINE', 'sqlite3')
DB_ENGINE = DB_ENGINE if DB_ENGINE in ['sqlite3', 'postgresql', 'mysql', 'oracle'] else 'sqlite3'

if DB_ENGINE == 'sqlite3':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db' / 'db.sqlite3',
            'OPTIONS': {
                # Allow longer wait for write locks so concurrent admin actions succeed.
                'timeout': int(os.environ.get('SQLITE_TIMEOUT', '30')),
            },
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST'),
            'PORT': os.environ.get('DB_PORT'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django_password_validators.password_history.password_validation.UniquePasswordsValidator',
        'OPTIONS': {
            # How many recently entered passwords matter.
            # Passwords out of range are deleted.
            # Default: 0 - All passwords entered by the user. All password hashes are stored.
            'last_passwords': 5  # Only the last 5 passwords entered by the user
        }
    },
]

# Validations are js because server does not get the password
PASSWORD_VALIDATORS = {
    'min_length_digit': 1,
    'min_length_special': 1,
    'min_length_lower': 1,
    'min_length_upper': 1,
    'min_characters': 8,
    # regex format
    'special_characters': "/[`~!@#$%\^\*\(\),\.\-=_+\\\\\[\]{}/\?]/g",

}

AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesStandaloneBackend',

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# django-axes configuration
AXES_USERNAME_FORM_FIELD = 'user.models.User.USERNAME_FIELD'
AXES_COOLOFF_TIME = timezone.timedelta(minutes=5)
# Allow up to 200 failed login attempts before temporary lockout.
# Read from env if provided; ensure it is an integer.
AXES_FAILURE_LIMIT = int(os.environ.get('AXES_FAILURE_LIMIT', '200'))
AXES_ENABLED = os.environ.get('AXES_ENABLED', not DEBUG)
AXES_IP_BLACKLIST = os.environ.get('AXES_IP_BLACKLIST', '').split(',')
SILENCED_SYSTEM_CHECKS = ['axes.W002']

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

USE_L10N = True

# Static files (CSS, JavaScript, Images) & compressor
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'app' / 'static',
]
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder'
]
COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
)
COMPRESS_OFFLINE = True
LIBSASS_OUTPUT_STYLE = 'compressed'
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

MEDIA_ROOT = 'files'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

# Use traditional 32-bit AutoField so third-party apps without BigAutoField
# migrations (e.g., django-password-validators) do not generate spurious
# migration files in site-packages.
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# App theme: dark, light, both
THEME = 'both'

# UserModel default
AUTH_USER_MODEL = 'user.User'
LOGIN_URL = '/auth/login'

# Judging portal link used in judge onboarding page
JUDGING_PORTAL_URL = '/judging/'

# Upload size limits: Django will raise RequestDataTooBig when the request
# body exceeds DATA_UPLOAD_MAX_MEMORY_SIZE. Reverse proxy (nginx) also has
# client_max_body_size; keep them coordinated. Defaults here raise the limit
# to 10 MiB which is suitable for typical permission slips or resumes.
DATA_UPLOAD_MAX_MEMORY_SIZE = int(os.environ.get('DATA_UPLOAD_MAX_MEMORY_SIZE', 10 * 1024 * 1024))
FILE_UPLOAD_MAX_MEMORY_SIZE = int(os.environ.get('FILE_UPLOAD_MAX_MEMORY_SIZE', 10 * 1024 * 1024))
# Admin bulk actions (like email previews) can submit thousands of checkbox
# values which exceed Django's default 1,000-field limit. Raise the ceiling so
# large selections do not trigger TooManyFieldsSent.
DATA_UPLOAD_MAX_NUMBER_FIELDS = int(os.environ.get('DATA_UPLOAD_MAX_NUMBER_FIELDS', '20000'))

# JWT settings
JWT_OIDC = {
    'TYPE': 'provider',  # Required
    'DISCOVERY_ENDPOINT': os.environ.get('OIDC_DISCOVERY_ENDPOINT',
                                         'http://localhost:8000/openid/.well-known/openid-configuration'),
}

DJANGO_TABLES2_TEMPLATE = 'django_tables2/bootstrap-responsive.html'
DJANGO_TABLES2_EXPORT_FORMATS = ['csv', 'json', 'latex', 'ods', 'tsv', 'xls', 'xlsx', 'yaml']

# Toast styles
MESSAGE_TAGS = {
    message_constants.DEBUG: 'info text-dark',
    message_constants.INFO: 'info text-dark',
    message_constants.SUCCESS: 'success',
    message_constants.WARNING: 'warning text-dark',
    message_constants.ERROR: 'danger',
}

# Google Recaptcha configuration
RECAPTCHA_PUBLIC_KEY = os.environ.get('RECAPTCHA_PUBLIC_KEY', '')
RECAPTCHA_PRIVATE_KEY = os.environ.get('RECAPTCHA_PRIVATE_KEY', '')
RECAPTCHA_WIDGET = os.environ.get('RECAPTCHA_WIDGET', 'ReCaptchaV2Checkbox')
RECAPTCHA_REGISTER = True
RECAPTCHA_LOGIN = False
try:
    RECAPTCHA_REQUIRED_SCORE = float(os.environ.get('RECAPTCHA_REQUIRED_SCORE', "0.85"))
except ValueError:
    RECAPTCHA_REQUIRED_SCORE = 0.85

# Login tries
LOGIN_TRIES = 1000 if DEBUG else 4

# Cron from Django-crontab
CRONJOBS = [
    ('0   4 * * *', 'django.core.management.call_command', ['clearsessions']),
    ('0 0 1 */6 *', 'django.core.management.call_command', ['compress', '--force']),
    ('0 */12 * * *', 'django.core.management.call_command', ['expire_invitations']),
]

# Deployment configurations for proxy pass and csrf
SECURE_HSTS_SECONDS = 2_592_000
SECURE_HSTS_PRELOAD = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Logging config to send logs to email automatically
LOGGING = {
    'version': 1,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'admin_email': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'app.log.HackathonDevEmailHandler',
        },
    },
    'loggers': {
        'django': {
            'level': 'ERROR',
            'handlers': ['admin_email'],
        },
    },
}

ANYMAIL = {
    "MANDRILL_API_KEY": os.environ.get('MANDRILL_API_KEY', None),
}

# Load filebased email backend if no Mandrill credentials and debug mode
if not ANYMAIL.get("MANDRILL_API_KEY") and DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    EMAIL_FILE_PATH = 'tmp/email-messages/'
else:
    EMAIL_BACKEND = "anymail.backends.mandrill.EmailBackend"



# Logging system
if DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True,
            },
        },
    }
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'console': {
                'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'console'
            },
            'mail_admins': {
                'level': 'ERROR',
                'class': 'django.utils.log.AdminEmailHandler',
                'include_html': True,
            }
        },
        'loggers': {
            'django': {
                'handlers': ['console', 'mail_admins'],
                'level': 'INFO',
                'propagate': True,
            },
        }
    }

SESSION_COOKIE_AGE = 86400

# Cache system
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django_cache',
    }
}

# Content-Security-Policy
CSP_DEFAULT_SRC = ["'self'", "www.w3.org", "data:", "cdn.jsdelivr.net", "cdnjs.cloudflare.com"]
CSP_FRAME_SRC = ['www.google.com']
CSP_WORKER_SRC = ['blob:']
CSP_SCRIPT_SRC = ["'self'", "cdn.jsdelivr.net", "cdnjs.cloudflare.com", "code.jquery.com", "d3js.org",
                  "www.google.com", "www.gstatic.com", "'unsafe-inline'"]
CSP_STYLE_SRC = ["'self'", "'unsafe-inline'", "cdnjs.cloudflare.com", "cdn.jsdelivr.net"]

# Securing Admin Page
ADMIN_URL = os.environ.get('ADMIN_URL', 'secret/')

# Security
SESSION_COOKIE_SECURE = CSRF_COOKIE_SECURE = not DEBUG
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# Allauth settings
SITE_ID = 1
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
SOCIALACCOUNT_ADAPTER = "app.allauth.MySocialAccountAdapter"

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {}
if os.environ.get('GITHUB_CLIENT_ID', None) is not None and os.environ.get('GITHUB_SECRET', None) is not None:
    SOCIALACCOUNT_PROVIDERS['github'] = {
        'SCOPE': [
            'user',
            'repo',
            'read:org',
        ],
        'APP': {
            'client_id': os.environ.get('GITHUB_CLIENT_ID'),
            'secret': os.environ.get('GITHUB_SECRET'),
            'key': '',
        },
        'ICON': 'bi bi-github',
    }

# Disposable email token from https://api.testmail.top/
DISPOSABLE_EMAIL_TOKEN = os.environ.get('DISPOSABLE_EMAIL_TOKEN', None)

# Messages services config
MESSAGES_SERVICES = {
    'SlackMessageService': {
        'ACCESS_TOKEN': os.environ.get('SLACK_ACCESS_TOKEN', None),
        'ANNOUNCEMENT_CHANNEL': os.environ.get('SLACK_ANNOUNCEMENT_CHANNEL', '#announcements')
    }
}

if len(MESSAGES_SERVICES) > 0:
    CRONJOBS.append(('*/5 * * * *', 'django.core.management.call_command', ['send_announcements']))

# DateTime formats
USE_L10N = False
DATETIME_FORMAT = 'N j, Y, H:i'
DATE_FORMAT = 'N j, Y'
SHORT_DATETIME_FORMAT = 'Y/m/d H:i'
TIME_FORMAT = 'H:i:s'
SHORT_DATE_FORMAT = 'Y/m/d'

# Latex binary
LATEX_INTERPRETER = 'pdflatex'
LATEX_GRAPHICSPATH = [os.path.join(BASE_DIR, 'latex_graphics')]
